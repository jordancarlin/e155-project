---
title: "MCU"
author: Zoe Worrall (zworrall@g.hmc.edu) & Jordan Carlin (jcarlin@hmc.edu)
date: November 19, 2024

format:
  html:
    other-links:
      - text: "E155 FA Development Board"
        href: "https://pages.hmc.edu/brake/class/e155/fa23/assets/doc/E155%20Development%20Board%20Schematic.pdf"
      - text: "E155 Breadboard Adapter v4"
        href: "https://hmc-e155.github.io/assets/doc/E155%20Breadboard%20Adapter%20Schematic.pdf"
      - text: "FPGA Github Files"
        href: "https://github.com/jordancarlin/e155-project/tree/main/mcu"
---

# MCU Setup

The multicore processor in this project is used to keep track of the current brush state, the color state, the thickness of the brush, and whether the brush is up or down. The system collects this data and then sends it to the FPGA board for VGA processing via a SPI package. There are two primary SPI packages used to communicate the status of bits, and they are organized such that the header of the color SPI block is easily distinguished and decoded.

## Schematic

The MCU makes use of many of the materials and ideas seen throughout the semester in MicroP's so far. It uses interrupts in order to map out the current color, with a total of seven potential colors (including erase). The system also implements the newer technology of Analog reading, which is used to determine the current state of a joystick for location control, as well as a potentiometer to control the thickness of the brush at any given time (ranging from 1x1 to 2x2 to 3x3).

![](mcu_images/mcu_pins.png)

The program starts first by initializing all of its components before entering a while loop, which controls the main functions required of the MCU. This while loop delays for some predetermined amount of time, before calling read_XY to find the current state of the joystick and to update the size of brush.

This information is used to determine what SPI packages are sent at the end of the while loop.

The block diagram below (@fig-bdiag1) depicts the general variables and assignments used within the MCU program.

::: {#fig-bdiag1}
![](mcu_images/block_diag.png)
:::

This can be expounded upon to show what exactly is happening within the program (@fig-bdiag2).

::: {#fig-bdiag2}
![](mcu_images/block_diag2.png)
:::

## Hardware

The hardware for the board has arrived and has been implemented on a breadboard. Future plans encompass adding larger buttons for the DIP Buttons, as well as potentially building a controller that will allows the user to control many items at once with little concern for messing up wiring.

Currently, the program is able to send out all the locations necessary dependent on which thickness the current brush is. This can be seen in the set of images below:

::: {.grid}

::: {.g-col-4}

![](mcu_images/1_locs.png)

:::

::: {.g-col-4}

![](mcu_images/4_locs.png)

:::

::: {.g-col-4}

![](mcu_images/9_locs.png)

:::

:::

The files are sent in this way to ensure the simplest possibe implementation on the FPGA. The FPGA board currently uses combinational logic to interpret the incoming SPI data, and as a result, by sending each pixel that should be currently turned on, the MCU prevents the FPGA from needing to use a finite state machine in order to interpret the data it is placing in the RAM at any given.

In addition, when a button is pressed, the color_spi spi packet is sent along with the location data, which contains information on whether the brush is down or up, as well as what color the current SPI bus is.

The maximum possible number of SPI packets sent in a given round is 10 (each SPI packet is considered to be to collections of 8 bits), and the minimum is 1.

A "SPI Packet", as we have deemed, can be of two types:

#### color_spi

![](mcu_images/color_spi.png)

#### loc_spi

![](mcu_images/loc_spi.png)

These SPI are differentiated by the first three bits of the SPI message: in the case of color_spi, the first three bits will always make the value of the character greater than 200, which is an impossible for the x and y indeces to be. As a result, the SPI blocks can be easily differentiated with the use of the first three bits, which the FPGA will figure out combinationally and will then use to adjust its values accordingly.

## Current Status

We are currently able to perform all necessary functions required for the final prototype, and mainly now need to configure the SPI connection and performance of the FPGA. As it stands, this video demonstrates the readouts of the board, as well as a representation of the data it will be sending to the FPGA board, at any given point in time. When the timer is replaced with a much shorter one, these updates will be sent at a frequency of roughly 1 kHz, although we will vary this depending on what we decide works best for timing on the FPGA.

{{< video https://youtu.be/XvtfpBKUMUc >}}